// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopXpress.DAL.Configurations;

#nullable disable

namespace ShopXpress.DAL.Migrations
{
    [DbContext(typeof(ShopXpressDbContext))]
    partial class ShopXpressDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7036e331-117e-4e80-91eb-542f674a5fb4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "8539346d-b695-49f9-915e-0ecf9dba9100",
                            Name = "Consumer",
                            NormalizedName = "CONSUMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShopXpress.Models.Data.BaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BaseItems");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = new Guid("d06c834b-b93e-4eb9-9b70-253709130797"),
                            Name = "Food"
                        },
                        new
                        {
                            Id = new Guid("61547a5e-a885-4bae-b0e3-a233d9cb4692"),
                            Name = "Toys"
                        },
                        new
                        {
                            Id = new Guid("55468074-b867-4dc9-b3dc-f3b4b890c6ac"),
                            Name = "Books"
                        },
                        new
                        {
                            Id = new Guid("ad2cb3c0-17e2-4837-a96c-2e2756929859"),
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = new Guid("5fe177cd-aa1e-44be-81ad-7ba2dcb48cd5"),
                            Name = "Health"
                        },
                        new
                        {
                            Id = new Guid("cc2b18a7-22af-4ad5-abc8-712b2b3588b6"),
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = new Guid("4ab2f398-3e1d-4cd0-8c21-55766bac483a"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("a5c375d9-ed54-4752-a4f0-6f13a8a3d2bf"),
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = new Guid("f84014a7-59df-4707-aa2c-5db4c49f81d4"),
                            Name = "Tools"
                        },
                        new
                        {
                            Id = new Guid("ae99f4ce-bfd2-47d0-af39-421dfa008b4a"),
                            Name = "Jewelry"
                        },
                        new
                        {
                            Id = new Guid("71ca42f5-3c50-4be7-bde5-d1d68b2bed41"),
                            Name = "Music"
                        },
                        new
                        {
                            Id = new Guid("d998f5f4-0f79-42b1-abd2-21014501f5b6"),
                            Name = "Movies"
                        },
                        new
                        {
                            Id = new Guid("a1ee8039-f651-4850-8cb1-ac1377eb7405"),
                            Name = "Games"
                        },
                        new
                        {
                            Id = new Guid("8fa0d957-3aa3-40e3-97c6-c18c2c2d84d7"),
                            Name = "Garden"
                        },
                        new
                        {
                            Id = new Guid("03699920-2ced-490e-8c5f-699c2897770c"),
                            Name = "Pet"
                        },
                        new
                        {
                            Id = new Guid("0339b7e5-2910-459b-9dd7-dd7f21cf3b67"),
                            Name = "Baby"
                        },
                        new
                        {
                            Id = new Guid("66b6f25b-7db1-4c6e-87b4-17b6dd781018"),
                            Name = "Industrial"
                        },
                        new
                        {
                            Id = new Guid("46c5ea6e-1143-4e0b-868e-12b88f2885f8"),
                            Name = "Grocery"
                        },
                        new
                        {
                            Id = new Guid("3be63b9d-0c02-4077-8d6a-d9e9f0945e19"),
                            Name = "Handmade"
                        },
                        new
                        {
                            Id = new Guid("3658572e-5d7b-47c2-ab80-f8d6d8977017"),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ShippingDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e85bada-2078-498e-8601-65c432d14f7a"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4818), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "High-quality, noise-canceling wireless headphones for an immersive audio experience.",
                            Manufacturer = "SoundWave Technologies",
                            StockQuantity = 20,
                            Title = "Wireless Bluetooth Headphones",
                            UnitPrice = 129.99m
                        },
                        new
                        {
                            Id = new Guid("91df33e9-b2d8-426c-9713-c3c0c07706b3"),
                            CategoryId = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4837), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Handcrafted genuine leather messenger bag for a classic, stylish look.",
                            Manufacturer = "RetroCraft",
                            StockQuantity = 20,
                            Title = "Vintage Leather Messenger Bag",
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            Id = new Guid("9d38c244-b117-4c4e-884d-325623b5e417"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4883), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Stay connected with your home from anywhere with this HD security camera.",
                            Manufacturer = "SecureGuard",
                            StockQuantity = 20,
                            Title = "Smart Home Security Camera",
                            UnitPrice = 79.99m
                        },
                        new
                        {
                            Id = new Guid("b0f0e931-7e13-49b2-88be-0b509d8a53a0"),
                            CategoryId = new Guid("d06c834b-b93e-4eb9-9b70-253709130797"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4899), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Premium organic green tea leaves for a soothing and healthy beverage.",
                            Manufacturer = "Nature's Brew",
                            StockQuantity = 20,
                            Title = "Organic Green Tea",
                            UnitPrice = 12.99m
                        },
                        new
                        {
                            Id = new Guid("4c1eba31-05ee-4da8-88a7-fa8a3a3e56ee"),
                            CategoryId = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4913), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Lightweight and comfortable running shoes for athletes and fitness enthusiasts.",
                            Manufacturer = "Runner's Choice",
                            StockQuantity = 20,
                            Title = "Men's Running Shoes",
                            UnitPrice = 69.99m
                        },
                        new
                        {
                            Id = new Guid("a887aa34-d322-4605-9248-66930dcb7302"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4928), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Capture stunning photos and videos with this advanced digital camera.",
                            Manufacturer = "PixelPro",
                            StockQuantity = 20,
                            Title = "Digital Camera",
                            UnitPrice = 499.99m
                        },
                        new
                        {
                            Id = new Guid("d87157fd-4894-473c-bddd-bcb5dfc91218"),
                            CategoryId = new Guid("ad2cb3c0-17e2-4837-a96c-2e2756929859"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4979), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Cozy and stylish handwoven throw blanket for your home decor.",
                            Manufacturer = "WeaveCrafters",
                            StockQuantity = 20,
                            Title = "Handwoven Throw Blanket",
                            UnitPrice = 29.99m
                        },
                        new
                        {
                            Id = new Guid("033db315-eec9-4030-8a72-0af8d726987d"),
                            CategoryId = new Guid("d06c834b-b93e-4eb9-9b70-253709130797"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(4993), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Indulge in the rich and delicious world of gourmet chocolate truffles.",
                            Manufacturer = "ChocoBliss",
                            StockQuantity = 20,
                            Title = "Gourmet Chocolate Truffles",
                            UnitPrice = 24.99m
                        },
                        new
                        {
                            Id = new Guid("3739770f-33fc-4adf-aec9-b40eba2b3ded"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5008), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Keep your devices charged on the go with this high-capacity power bank.",
                            Manufacturer = "PowerUp Tech",
                            StockQuantity = 20,
                            Title = "Portable Power Bank",
                            UnitPrice = 39.99m
                        },
                        new
                        {
                            Id = new Guid("eb76e71d-9682-4af9-855a-1cd720eb3286"),
                            CategoryId = new Guid("4ab2f398-3e1d-4cd0-8c21-55766bac483a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5023), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Non-slip, eco-friendly yoga mat for a comfortable workout experience.",
                            Manufacturer = "ZenFitness",
                            StockQuantity = 20,
                            Title = "Yoga Mat",
                            UnitPrice = 24.99m
                        },
                        new
                        {
                            Id = new Guid("b4778ba9-1693-4c5d-b785-f1e4a26845bd"),
                            CategoryId = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5082), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Classic and durable denim jeans for a timeless wardrobe staple.",
                            Manufacturer = "DenimCraft",
                            StockQuantity = 20,
                            Title = "Men's Denim Jeans",
                            UnitPrice = 49.99m
                        },
                        new
                        {
                            Id = new Guid("93c6e8ed-d9da-48f5-aefa-ad50bf5a8b8a"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5097), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Control your home's temperature remotely with this energy-efficient smart thermostat.",
                            Manufacturer = "EcoHeat",
                            StockQuantity = 20,
                            Title = "Smart Thermostat",
                            UnitPrice = 119.99m
                        },
                        new
                        {
                            Id = new Guid("36baebe5-1896-47b5-a2b4-895c5803892f"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5111), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Precision gaming mouse with customizable features for gamers.",
                            Manufacturer = "GamePro",
                            StockQuantity = 20,
                            Title = "Wireless Gaming Mouse",
                            UnitPrice = 49.99m
                        },
                        new
                        {
                            Id = new Guid("3048c008-afe1-4f70-a32c-c6a1c45398da"),
                            CategoryId = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5125), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Comfortable and stylish running shorts for active women.",
                            Manufacturer = "FitFemme",
                            StockQuantity = 20,
                            Title = "Women's Running Shorts",
                            UnitPrice = 29.99m
                        },
                        new
                        {
                            Id = new Guid("665738e9-4082-4b62-b192-6afb12cfcc6f"),
                            CategoryId = new Guid("d06c834b-b93e-4eb9-9b70-253709130797"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5171), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Nutrient-rich organic quinoa for a healthy and versatile grain option.",
                            Manufacturer = "EarthGrains",
                            StockQuantity = 20,
                            Title = "Organic Quinoa",
                            UnitPrice = 9.99m
                        },
                        new
                        {
                            Id = new Guid("577fc5fa-e3ca-4115-8de0-08d9bf764b0f"),
                            CategoryId = new Guid("f84014a7-59df-4707-aa2c-5db4c49f81d4"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5186), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Durable and eco-friendly bamboo cutting boards for your kitchen.",
                            Manufacturer = "GreenCut",
                            StockQuantity = 20,
                            Title = "Bamboo Cutting Board Set",
                            UnitPrice = 34.99m
                        },
                        new
                        {
                            Id = new Guid("efac08f2-935b-4c00-8565-766c08c8ef79"),
                            CategoryId = new Guid("4678572e-5d7b-47c2-ab80-f8d6d8977017"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5200), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Compact and portable Bluetooth speaker for on-the-go music.",
                            Manufacturer = "SonicBeats",
                            StockQuantity = 20,
                            Title = "Bluetooth Speaker",
                            UnitPrice = 39.99m
                        },
                        new
                        {
                            Id = new Guid("2dac9c47-4f58-409b-a997-dd6094e15120"),
                            CategoryId = new Guid("afb069bc-7ae9-4b5e-bf74-3350fe341894"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5213), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Stylish and functional leather wallet with ample card and cash storage.",
                            Manufacturer = "LuxeLeather",
                            StockQuantity = 20,
                            Title = "Women's Leather Wallet",
                            UnitPrice = 49.99m
                        },
                        new
                        {
                            Id = new Guid("8da867bc-e174-4d0d-a4a8-70c2445d1f38"),
                            CategoryId = new Guid("4ab2f398-3e1d-4cd0-8c21-55766bac483a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5227), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Eco-friendly and leak-proof stainless steel water bottle for hydration on the move.",
                            Manufacturer = "AquaPure",
                            StockQuantity = 20,
                            Title = "Stainless Steel Water Bottle",
                            UnitPrice = 19.99m
                        },
                        new
                        {
                            Id = new Guid("fd76d957-e3a9-4bd7-a8b5-8a87dc13d44d"),
                            CategoryId = new Guid("d06c834b-b93e-4eb9-9b70-253709130797"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 29, 19, 31, 58, 265, DateTimeKind.Unspecified).AddTicks(5481), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Premium roasted coffee beans for the coffee connoisseur.",
                            Manufacturer = "BeanBliss",
                            StockQuantity = 20,
                            Title = "Gourmet Coffee Beans",
                            UnitPrice = 16.99m
                        });
                });

            modelBuilder.Entity("ShopXpress.Models.Data.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShopXpress.Models.Data.CartItem", b =>
                {
                    b.HasBaseType("ShopXpress.Models.Data.BaseItem");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.OrderItem", b =>
                {
                    b.HasBaseType("ShopXpress.Models.Data.BaseItem");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopXpress.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Cart", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("ShopXpress.Models.Data.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Order", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Product", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.CartItem", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopXpress.Models.Data.BaseItem", null)
                        .WithOne()
                        .HasForeignKey("ShopXpress.Models.Data.CartItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopXpress.Models.Data.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.OrderItem", b =>
                {
                    b.HasOne("ShopXpress.Models.Data.BaseItem", null)
                        .WithOne()
                        .HasForeignKey("ShopXpress.Models.Data.OrderItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopXpress.Models.Data.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopXpress.Models.Data.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopXpress.Models.Data.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
